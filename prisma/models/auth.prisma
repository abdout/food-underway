// Auth Models
enum UserRole {
  PLATFORM_ADMIN // Platform admin (MenuCloud SA team)
  OWNER          // Restaurant owner
  MANAGER        // Restaurant/Branch manager
  CASHIER        // Cashier/Order taker
  WAITER         // Waiter/Server
  CHEF           // Kitchen staff
  DELIVERY       // Delivery personnel
  USER           // General user (customer)
}

model User {
  id            String    @id @default(cuid())
  username      String?
  email         String?
  emailVerified DateTime?
  image         String?
  password      String?
  role          UserRole  @default(USER)

  // Phone for Saudi market (WhatsApp, SMS)
  phone         String?
  phoneVerified Boolean   @default(false)

  // Multi-tenant fields
  restaurantId String? // null for PLATFORM_ADMIN
  restaurant   Restaurant? @relation("RestaurantUsers", fields: [restaurantId], references: [id])

  // Owner relationship (for restaurant owners)
  ownedRestaurants Restaurant[] @relation("RestaurantOwner")

  accounts              Account[]
  isTwoFactorEnabled    Boolean                @default(false)
  twoFactorConfirmation TwoFactorConfirmation?

  // Stripe subscription fields (user-scoped for compatibility with pricing UI)
  stripeSubscriptionId   String?
  stripeCustomerId       String?
  stripePriceId          String?
  stripeCurrentPeriodEnd DateTime?

  // User-scoped invoicing (standalone invoice block)
  userInvoices         UserInvoice[]
  userInvoiceSettings  UserInvoiceSettings?

  // Legal relations
  legalConsents        LegalConsent[]
  complianceLogs       ComplianceLog[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([email, schoolId]) // Allow same email across different schools
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model VerificationToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model PasswordResetToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model TwoFactorToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model TwoFactorConfirmation {
  id     String @id @default(cuid())
  userId String @unique
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
}
