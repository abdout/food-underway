// Order Models

model Order {
  id           String      @id @default(cuid())
  merchant     Merchant  @relation(fields: [merchantId], references: [id])
  merchantId   String

  // Branch tracking
  branch       Branch?     @relation(fields: [branchId], references: [id])
  branchId     String?

  // Order number (displayed to customer)
  orderNumber  String

  // Customer info
  customer     Customer?   @relation(fields: [customerId], references: [id])
  customerId   String?

  // For non-registered customers
  customerName String?
  customerPhone String?
  customerEmail String?

  // Order type
  type         OrderType
  status       OrderStatus @default(PENDING)

  // Table for dine-in
  table        Table?      @relation(fields: [tableId], references: [id])
  tableId      String?

  // Delivery info
  deliveryAddress String?
  deliveryNotes String?
  deliveryFee  Float       @default(0)
  deliveryTime DateTime?   // Estimated delivery time

  // Pickup info
  pickupTime   DateTime?

  // Payment
  paymentMethod PaymentMethod?
  paymentStatus PaymentStatus @default(PENDING)
  transactionId String?     // Payment gateway transaction ID

  // Amounts (all in SAR)
  subtotal     Float
  tax          Float
  discount     Float       @default(0)
  discountCode String?     // Applied discount code
  tip          Float       @default(0)
  total        Float

  // Items
  items        OrderItem[]

  // Review
  review       Review?     // One review per order

  // Notes
  notes        String?
  kitchenNotes String?

  // Staff tracking
  cashierId    String?     // Who took the order
  preparerId   String?     // Who prepared the order

  // Timestamps
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt
  acceptedAt   DateTime?   // When merchant accepted
  preparingAt  DateTime?   // When preparation started
  readyAt      DateTime?   // When order was ready
  completedAt  DateTime?
  canceledAt   DateTime?
  cancelReason String?

  @@unique([merchantId, orderNumber]) // Order numbers unique per merchant
  @@index([merchantId])
  @@index([branchId])
  @@index([customerId])
  @@index([status])
  @@index([createdAt])
}

enum OrderType {
  DINE_IN
  PICKUP
  DELIVERY
}

enum OrderStatus {
  PENDING      // Order received
  CONFIRMED    // Merchant confirmed
  PREPARING    // Kitchen preparing
  READY        // Ready for pickup/serve
  OUT_FOR_DELIVERY // For delivery orders
  COMPLETED    // Delivered/Picked up
  CANCELED     // Canceled
}

enum PaymentMethod {
  CASH
  MADA         // Saudi debit cards
  CREDIT_CARD
  STC_PAY      // Popular Saudi e-wallet
  APPLE_PAY
  SADAD        // Saudi payment system
}

enum PaymentStatus {
  PENDING
  PAID
  FAILED
  REFUNDED
  PARTIAL_REFUND
}

model OrderItem {
  id           String      @id @default(cuid())
  order        Order       @relation(fields: [orderId], references: [id], onDelete: Cascade)
  orderId      String

  menuItem     MenuItem    @relation(fields: [menuItemId], references: [id])
  menuItemId   String

  quantity     Int
  price        Float       // Price at time of order
  total        Float       // price * quantity + modifiers

  // Selected modifiers (JSON for flexibility)
  modifiers    Json?

  // Special requests
  notes        String?

  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt

  @@index([orderId])
  @@index([menuItemId])
}

model Customer {
  id           String      @id @default(cuid())
  restaurant   Merchant  @relation(fields: [merchantId], references: [id])
  merchantId String

  // Contact info
  name         String
  phone        String      @unique
  email        String?

  // Preferences
  language     String      @default("ar") // ar or en
  notes        String?

  // Loyalty
  loyaltyPoints Int        @default(0)
  totalOrders  Int         @default(0)
  totalSpent   Float       @default(0)

  // Orders
  orders       Order[]
  reservations Reservation[]
  reviews      Review[]
  customerStat CustomerStat?

  // Timestamps
  firstOrderAt DateTime?
  lastOrderAt  DateTime?
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt

  @@unique([merchantId, phone])
  @@index([merchantId])
}

model Table {
  id           String      @id @default(cuid())
  merchant     Merchant  @relation(fields: [merchantId], references: [id], onDelete: Cascade)
  merchantId   String

  // Branch association (tables belong to specific branches)
  branch       Branch?     @relation(fields: [branchId], references: [id])
  branchId     String?

  number       String      // Table number/name
  qrCode       String?     // QR code for table
  capacity     Int         // Number of seats

  floor        Int         @default(1) // Floor number
  section      TableSection @default(MIXED)
  status       TableStatus  @default(AVAILABLE)

  // Position for visual floor plan
  positionX    Int?
  positionY    Int?

  orders       Order[]
  reservations Reservation[]

  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt

  @@unique([merchantId, branchId, number]) // Table numbers unique per branch
  @@index([merchantId])
  @@index([branchId])
  @@index([status])
}

enum TableSection {
  FAMILY       // Family section
  SINGLES      // Singles section
  MIXED        // Mixed section
  OUTDOOR      // Outdoor seating
  PRIVATE      // Private room
}

enum TableStatus {
  AVAILABLE
  OCCUPIED
  RESERVED
  MAINTENANCE
}

model Reservation {
  id           String      @id @default(cuid())
  merchant     Merchant  @relation(fields: [merchantId], references: [id])
  merchantId   String

  // Branch tracking
  branch       Branch?     @relation(fields: [branchId], references: [id])
  branchId     String?

  customer     Customer?   @relation(fields: [customerId], references: [id])
  customerId   String?

  // For non-registered customers
  customerName String
  customerPhone String
  customerEmail String?

  table        Table?      @relation(fields: [tableId], references: [id])
  tableId      String?

  date         DateTime
  time         String      // e.g., "19:00"
  duration     Int         @default(120) // minutes
  partySize    Int

  status       ReservationStatus @default(PENDING)

  // Special requests
  specialRequests String?
  notes        String?

  // Confirmation
  confirmationCode String?  // Unique code for customer reference
  confirmedBy  String?      // Staff who confirmed
  confirmedAt  DateTime?

  // Timestamps
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt
  seatedAt     DateTime?   // When customer was seated
  completedAt  DateTime?   // When visit completed

  @@unique([merchantId, confirmationCode]) // Confirmation codes unique per merchant
  @@index([merchantId])
  @@index([branchId])
  @@index([customerId])
  @@index([date])
  @@index([status])
}

enum ReservationStatus {
  PENDING
  CONFIRMED
  SEATED
  COMPLETED
  CANCELED
  NO_SHOW
}