// Merchant Models for Menu Platform
// Merchant represents any food service business (restaurant, cafe, coffee shop, bakery, etc.)

model Merchant {
  id          String   @id @default(cuid())

  // Basic Information
  name        String
  nameAr      String?  // Arabic name
  description String?
  descriptionAr String? // Arabic description

  // Merchant Type
  type        MerchantType @default(RESTAURANT)
  cuisine     String?  // e.g., "Saudi", "Italian", "Coffee"

  // Contact Information
  phone       String
  email       String?
  website     String?

  // Location
  address     String
  addressAr   String?
  city        String
  region      String?  // e.g., "Eastern Province", "Riyadh Region"
  country     String   @default("SA")
  latitude    Float?
  longitude   Float?

  // Business Information
  commercialRegister String? // Saudi commercial registration
  vatNumber   String?  // ZATCA VAT number
  municipalityLicense String? // Balady license

  // Operating Hours
  operatingHours Json? // Flexible JSON for complex schedules

  // Features & Settings
  features    MerchantFeature[]
  settings    Json?    // Merchant-specific settings

  // Branding
  logo        String?
  coverImage  String?
  primaryColor String?

  // Subscription & Billing
  subscriptionTier String @default("STARTER") // STARTER, PROFESSIONAL, ENTERPRISE
  subscriptionStatus String @default("TRIALING") // TRIALING, ACTIVE, PAST_DUE, CANCELED, PAUSED
  subscriptionEndDate DateTime?

  // Relationships
  owner       User     @relation("MerchantOwner", fields: [ownerId], references: [id])
  ownerId     String

  users       User[]   @relation("MerchantUsers")
  branches    Branch[]
  menus       Menu[]
  orders      Order[]
  customers   Customer[]
  tables      Table[]
  reservations Reservation[]

  // Marketing & Loyalty
  loyaltyProgram LoyaltyProgram?
  campaigns   Campaign[]
  coupons     Coupon[]
  reviews     Review[]

  // Analytics
  dailyStats  DailyStat[]
  menuItemStats MenuItemStat[]
  customerStats CustomerStat[]
  inventoryLogs InventoryLog[]
  auditLogs   AuditLog[]

  // Timestamps
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@index([ownerId])
}

enum MerchantType {
  RESTAURANT
  CAFE
  COFFEE_SHOP
  BAKERY
  FAST_FOOD
  FINE_DINING
  CLOUD_KITCHEN
  FOOD_TRUCK
}

model MerchantFeature {
  id           String      @id @default(cuid())
  merchant     Merchant  @relation(fields: [merchantId], references: [id], onDelete: Cascade)
  merchantId   String

  feature      Feature
  enabled      Boolean     @default(true)

  @@unique([merchantId, feature])
}

enum Feature {
  QR_MENU
  WHATSAPP_ORDERING
  TABLE_RESERVATIONS
  LOYALTY_PROGRAM
  ONLINE_PAYMENTS
  DELIVERY
  PICKUP
  DINE_IN
  MULTI_BRANCH
  INVENTORY_TRACKING
  STAFF_MANAGEMENT
  ANALYTICS
  CUSTOMER_FEEDBACK
  MARKETING
  POS_INTEGRATION
}

model Branch {
  id           String      @id @default(cuid())
  merchant     Merchant  @relation(fields: [merchantId], references: [id], onDelete: Cascade)
  merchantId   String

  name         String
  nameAr       String?

  // Location
  address      String
  addressAr    String?
  city         String?
  phone        String
  latitude     Float?
  longitude    Float?

  // Manager
  managerId    String?

  // Operating hours (can be different from main branch)
  operatingHours Json?

  // Settings
  isMainBranch Boolean     @default(false)
  isActive     Boolean     @default(true)

  // Relationships
  menus        Menu[]      // Branch-specific menus
  orders       Order[]     // Branch-specific orders
  tables       Table[]     // Branch-specific tables
  reservations Reservation[] // Branch-specific reservations
  reviews      Review[]    // Branch-specific reviews
  dailyStats   DailyStat[] // Branch-specific stats

  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt

  @@unique([merchantId, name]) // Unique branch names per merchant
  @@index([merchantId])
}